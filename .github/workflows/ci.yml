name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

# Set permissions for the entire workflow
permissions:
  contents: read
  issues: write
  pull-requests: write
  statuses: write
  checks: write

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Code Quality and Linting
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Node.js dependencies
        run: npm ci

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npm run format -- --check

      - name: Run Python linting
        run: |
          chmod +x scripts/run-flake8.sh
          ./scripts/run-flake8.sh
          black --check services/content-creation/
          isort --check-only services/content-creation/

  # Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: qylon_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Node.js dependencies
        run: npm ci

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup CI environment
        run: |
          chmod +x scripts/ci-setup.sh
          source scripts/ci-setup.sh

      - name: Install Redis client
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-tools

      - name: Wait for services to be ready
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "PostgreSQL is unavailable - sleeping"
            sleep 2
          done
          echo "PostgreSQL is ready!"

          echo "Waiting for Redis to be ready..."
          until redis-cli -h localhost -p 6379 ping; do
            echo "Redis is unavailable - sleeping"
            sleep 2
          done
          echo "Redis is ready!"

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/qylon_test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: qylon_test
          DB_USER: postgres
          DB_PASSWORD: postgres
        run: |
          echo "Running database migrations..."
          npm run db:migrate

      - name: Run Node.js tests
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/qylon_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: ci-test-jwt-secret-key-for-testing-only
          SUPABASE_URL: https://placeholder.supabase.co
          SUPABASE_SERVICE_ROLE_KEY: placeholder-service-role-key
        run: |
          # Clear Jest cache to prevent module resolution issues
          if [ -f "scripts/clear-jest-cache.sh" ]; then
            chmod +x scripts/clear-jest-cache.sh && ./scripts/clear-jest-cache.sh
          else
            echo "Jest cache clearing script not found, using fallback method"
            npx jest --clearCache || true
            npm cache clean --force || true
          fi
          npm run test:unit && npm run test:integration

      - name: Install K6 for performance testing
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose-plugin

      - name: Start services for performance testing
        run: |
          # Start databases first
          docker compose -f docker-compose.test.yml up -d
          sleep 30

          # Start API Gateway and Integration Management for performance testing
          export JWT_SECRET=ci-test-jwt-secret-key-for-testing-only
          docker compose up -d api-gateway integration-management
          sleep 30

      - name: Run performance tests
        env:
          CI: true
          ENVIRONMENT: ci
          BASE_URL: http://localhost:3000
        run: |
          chmod +x scripts/performance-test.sh
          ./scripts/performance-test.sh --test-type load

      - name: Run Python tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/qylon_test
          REDIS_URL: redis://localhost:6379
        run: |
          # Check for Python services and run their tests
          for service in services/*/; do
            if [ -f "$service/requirements.txt" ]; then
              service_name=$(basename "$service")
              echo "Found Python service: $service_name"

              # Look for tests in various locations
              if [ -d "$service/tests" ]; then
                echo "Running tests from $service/tests/"
                pytest "$service/tests/" -v --cov="$service"
              elif [ -d "$service/src/__tests__" ]; then
                echo "Running tests from $service/src/__tests__/"
                cd "$service" && PYTHONPATH="$service/src:$PYTHONPATH" pytest src/__tests__/ -v --cov=src
              elif [ -f "$service/test_*.py" ]; then
                echo "Running test files in $service/"
                pytest "$service/test_*.py" -v --cov="$service"
              else
                echo "No tests found for $service_name"
              fi
            fi
          done

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: qylon_integration_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run integration tests
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/qylon_integration_test
          REDIS_URL: redis://localhost:6379
        run: npm run test:integration

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level moderate

      - name: Check Snyk token availability
        run: |
          if [ -z "${{ secrets.SNYK_TOKEN }}" ]; then
            echo "⚠️ SNYK_TOKEN secret not configured. Skipping Snyk security scan."
            echo "To enable Snyk security scanning:"
            echo "1. Sign up at https://snyk.io"
            echo "2. Get your API token from https://app.snyk.io/account"
            echo "3. Add SNYK_TOKEN secret to your GitHub repository settings"
          else
            echo "✅ SNYK_TOKEN found. Running Snyk security scan."
          fi

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

  # Build and Test Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security]
    strategy:
      matrix:
        service: [api-gateway, meeting-intelligence, workflow-automation]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check DigitalOcean Registry credentials
        run: |
          if [ -z "${{ secrets.DO_REGISTRY_USERNAME }}" ] || [ -z "${{ secrets.DO_REGISTRY_PASSWORD }}" ]; then
            echo "⚠️ DigitalOcean Container Registry credentials not configured."
            echo "To enable Docker image building and pushing:"
            echo "1. Create a DigitalOcean Container Registry"
            echo "2. Get your registry credentials from DigitalOcean dashboard"
            echo "3. Add DO_REGISTRY_USERNAME and DO_REGISTRY_PASSWORD secrets to your GitHub repository"
            echo "Skipping Docker login and image push..."
            echo "DO_REGISTRY_USERNAME_MISSING=true" >> $GITHUB_ENV
            echo "DO_REGISTRY_PASSWORD_MISSING=true" >> $GITHUB_ENV
          else
            echo "✅ DigitalOcean Container Registry credentials found."
            echo "DO_REGISTRY_USERNAME_MISSING=false" >> $GITHUB_ENV
            echo "DO_REGISTRY_PASSWORD_MISSING=false" >> $GITHUB_ENV
          fi

      - name: Login to DigitalOcean Container Registry
        if: env.DO_REGISTRY_USERNAME_MISSING == 'false' && env.DO_REGISTRY_PASSWORD_MISSING == 'false'
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: ${{ secrets.DO_REGISTRY_USERNAME }}
          password: ${{ secrets.DO_REGISTRY_PASSWORD }}

      - name: Build Docker image
        if: env.DO_REGISTRY_USERNAME_MISSING == 'false' && env.DO_REGISTRY_PASSWORD_MISSING == 'false'
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          push: true
          tags: |
            registry.digitalocean.com/qylon/${{ matrix.service }}:latest
            registry.digitalocean.com/qylon/${{ matrix.service }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Docker image (local only)
        if: env.DO_REGISTRY_USERNAME_MISSING == 'true' || env.DO_REGISTRY_PASSWORD_MISSING == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          push: false
          tags: |
            qylon/${{ matrix.service }}:latest
            qylon/${{ matrix.service }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check DigitalOcean credentials
        run: |
          if [ -z "${{ secrets.DO_ACCESS_TOKEN }}" ] || [ -z "${{ secrets.DO_APP_ID }}" ]; then
            echo "⚠️ DigitalOcean deployment credentials not configured."
            echo "To enable DigitalOcean App Platform deployment:"
            echo "1. Create a DigitalOcean API token at https://cloud.digitalocean.com/account/api/tokens"
            echo "2. Create a DigitalOcean App Platform app and get the App ID"
            echo "3. Add DO_ACCESS_TOKEN and DO_APP_ID secrets to your GitHub repository settings"
            echo "Skipping deployment..."
            echo "DO_ACCESS_TOKEN_MISSING=true" >> $GITHUB_ENV
            echo "DO_APP_ID_MISSING=true" >> $GITHUB_ENV
          else
            echo "✅ DigitalOcean deployment credentials found."
            echo "DO_ACCESS_TOKEN_MISSING=false" >> $GITHUB_ENV
            echo "DO_APP_ID_MISSING=false" >> $GITHUB_ENV
          fi

      - name: Setup DigitalOcean CLI
        if: env.DO_ACCESS_TOKEN_MISSING == 'false' && env.DO_APP_ID_MISSING == 'false'
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_ACCESS_TOKEN }}

      - name: Deploy to DigitalOcean App Platform
        if: env.DO_ACCESS_TOKEN_MISSING == 'false' && env.DO_APP_ID_MISSING == 'false'
        run: |
          doctl apps create-deployment ${{ secrets.DO_APP_ID }} --force-rebuild

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check DigitalOcean credentials
        run: |
          if [ -z "${{ secrets.DO_ACCESS_TOKEN }}" ] || [ -z "${{ secrets.DO_APP_ID }}" ]; then
            echo "⚠️ DigitalOcean deployment credentials not configured."
            echo "To enable DigitalOcean App Platform deployment:"
            echo "1. Create a DigitalOcean API token at https://cloud.digitalocean.com/account/api/tokens"
            echo "2. Create a DigitalOcean App Platform app and get the App ID"
            echo "3. Add DO_ACCESS_TOKEN and DO_APP_ID secrets to your GitHub repository settings"
            echo "Skipping deployment..."
            echo "DO_ACCESS_TOKEN_MISSING=true" >> $GITHUB_ENV
            echo "DO_APP_ID_MISSING=true" >> $GITHUB_ENV
          else
            echo "✅ DigitalOcean deployment credentials found."
            echo "DO_ACCESS_TOKEN_MISSING=false" >> $GITHUB_ENV
            echo "DO_APP_ID_MISSING=false" >> $GITHUB_ENV
          fi

      - name: Setup DigitalOcean CLI
        if: env.DO_ACCESS_TOKEN_MISSING == 'false' && env.DO_APP_ID_MISSING == 'false'
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_ACCESS_TOKEN }}

      - name: Deploy to DigitalOcean App Platform
        if: env.DO_ACCESS_TOKEN_MISSING == 'false' && env.DO_APP_ID_MISSING == 'false'
        run: |
          doctl apps create-deployment ${{ secrets.DO_APP_ID }} --force-rebuild

      - name: Run smoke tests
        if: env.DO_ACCESS_TOKEN_MISSING == 'false' && env.DO_APP_ID_MISSING == 'false'
        run: |
          # Add smoke tests here
          echo "Running smoke tests..."

  # Notify on failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs:
      [
        lint,
        test,
        integration-test,
        security,
        build,
        deploy-staging,
        deploy-production,
      ]
    if: failure()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#qylon-dev'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always() && env.SLACK_WEBHOOK_URL != ''
# Trigger new CI run
