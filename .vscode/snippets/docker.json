{
  "Dockerfile": {
    "prefix": "dockerfile",
    "body": [
      "# Multi-stage build for ${1:service_name}",
      "FROM node:20-alpine AS base",
      "",
      "# Install dependencies only when needed",
      "FROM base AS deps",
      "RUN apk add --no-cache libc6-compat",
      "WORKDIR /app",
      "",
      "# Install dependencies based on the preferred package manager",
      "COPY package.json package-lock.json* ./",
      "RUN npm ci --only=production",
      "",
      "# Rebuild the source code only when needed",
      "FROM base AS builder",
      "WORKDIR /app",
      "COPY --from=deps /app/node_modules ./node_modules",
      "COPY . .",
      "",
      "# Build the application",
      "RUN npm run build",
      "",
      "# Production image, copy all the files and run the app",
      "FROM base AS runner",
      "WORKDIR /app",
      "",
      "# Create non-root user",
      "RUN addgroup --system --gid 1001 nodejs",
      "RUN adduser --system --uid 1001 nodejs",
      "",
      "COPY --from=builder /app/dist ./dist",
      "COPY --from=builder /app/node_modules ./node_modules",
      "COPY --from=builder /app/package.json ./package.json",
      "",
      "USER nodejs",
      "",
      "EXPOSE ${2:3000}",
      "",
      "ENV NODE_ENV=production",
      "ENV PORT=${2:3000}",
      "",
      "# Health check",
      "HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\",
      "  CMD curl -f http://localhost:${2:3000}/health || exit 1",
      "",
      "CMD [\"npm\", \"start\"]"
    ],
    "description": "Create a multi-stage Dockerfile for Node.js service"
  },
  "Docker Compose Service": {
    "prefix": "docker-compose-service",
    "body": [
      "  ${1:service_name}:",
      "    build:",
      "      context: ./services/${1:service_name}",
      "      dockerfile: Dockerfile",
      "    ports:",
      "      - \"${2:3000}:${2:3000}\"",
      "    environment:",
      "      - NODE_ENV=development",
      "      - PORT=${2:3000}",
      "      - DATABASE_URL=${DATABASE_URL}",
      "      - REDIS_URL=redis://redis:6379",
      "      - SUPABASE_URL=${SUPABASE_URL}",
      "      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}",
      "      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}",
      "    depends_on:",
      "      - postgres",
      "      - redis",
      "    volumes:",
      "      - ./services/${1:service_name}:/app",
      "      - /app/node_modules",
      "    networks:",
      "      - qylon-network",
      "    restart: unless-stopped",
      "    healthcheck:",
      "      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:${2:3000}/health\"]",
      "      interval: 30s",
      "      timeout: 10s",
      "      retries: 3",
      "      start_period: 40s"
    ],
    "description": "Create a Docker Compose service configuration"
  },
  "Python Dockerfile": {
    "prefix": "python-dockerfile",
    "body": [
      "# Multi-stage build for ${1:service_name}",
      "FROM python:3.11-slim AS base",
      "",
      "# Set environment variables",
      "ENV PYTHONDONTWRITEBYTECODE=1",
      "ENV PYTHONUNBUFFERED=1",
      "ENV PYTHONPATH=/app",
      "",
      "# Install system dependencies",
      "RUN apt-get update && apt-get install -y \\",
      "    gcc \\",
      "    curl \\",
      "    && rm -rf /var/lib/apt/lists/*",
      "",
      "# Create non-root user",
      "RUN groupadd -r appuser && useradd -r -g appuser appuser",
      "",
      "# Set work directory",
      "WORKDIR /app",
      "",
      "# Install Python dependencies",
      "COPY requirements.txt .",
      "RUN pip install --no-cache-dir -r requirements.txt",
      "",
      "# Copy application code",
      "COPY . .",
      "",
      "# Change ownership to non-root user",
      "RUN chown -R appuser:appuser /app",
      "USER appuser",
      "",
      "# Expose port",
      "EXPOSE ${2:3000}",
      "",
      "# Health check",
      "HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\",
      "  CMD curl -f http://localhost:${2:3000}/health || exit 1",
      "",
      "# Run the application",
      "CMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"${2:3000}\"]"
    ],
    "description": "Create a multi-stage Dockerfile for Python service"
  }
}
