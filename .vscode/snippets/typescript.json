{
  "API Endpoint": {
    "prefix": "api-endpoint",
    "body": [
      "import { Request, Response, NextFunction } from 'express';",
      "import { logger } from '@/utils/logger';",
      "import { asyncHandler } from '@/middleware/errorHandler';",
      "",
      "export const ${1:endpointName} = asyncHandler(async (",
      "  req: Request,",
      "  res: Response,",
      "  next: NextFunction",
      ") => {",
      "  try {",
      "    logger.info('${1:endpointName} called', {",
      "      userId: req.user?.id,",
      "      requestId: req.requestId",
      "    });",
      "",
      "    // TODO: Implement endpoint logic",
      "    ",
      "    res.status(200).json({",
      "      success: true,",
      "      data: ${2:result},",
      "      timestamp: new Date().toISOString()",
      "    });",
      "  } catch (error) {",
      "    logger.error('${1:endpointName} failed', {",
      "      error: error.message,",
      "      userId: req.user?.id,",
      "      requestId: req.requestId",
      "    });",
      "    next(error);",
      "  }",
      "});"
    ],
    "description": "Create a new API endpoint with proper error handling and logging"
  },
  "Database Query": {
    "prefix": "db-query",
    "body": [
      "const { data, error } = await supabase",
      "  .from('${1:table_name}')",
      "  .select('${2:columns}')",
      "  .${3:condition}('${4:column}', ${5:value});",
      "",
      "if (error) {",
      "  logger.error('Database query failed', {",
      "    error: error.message,",
      "    table: '${1:table_name}',",
      "    operation: '${6:operation}'",
      "  });",
      "  throw new Error('Database operation failed');",
      "}",
      "",
      "return data;"
    ],
    "description": "Create a Supabase database query with error handling"
  },
  "Service Function": {
    "prefix": "service-func",
    "body": [
      "export const ${1:functionName} = async (${2:params}): Promise<${3:ReturnType}> => {",
      "  try {",
      "    logger.info('${1:functionName} started', {",
      "      ${4:logParams}",
      "    });",
      "",
      "    // TODO: Implement service logic",
      "    ",
      "    logger.info('${1:functionName} completed', {",
      "      ${5:resultLog}",
      "    });",
      "",
      "    return ${6:result};",
      "  } catch (error) {",
      "    logger.error('${1:functionName} failed', {",
      "      error: error.message,",
      "      ${4:logParams}",
      "    });",
      "    throw error;",
      "  }",
      "};"
    ],
    "description": "Create a service function with proper logging and error handling"
  },
  "React Component": {
    "prefix": "react-comp",
    "body": [
      "import React, { useState, useEffect } from 'react';",
      "import { logger } from '@/utils/logger';",
      "",
      "interface ${1:ComponentName}Props {",
      "  ${2:props}",
      "}",
      "",
      "export const ${1:ComponentName}: React.FC<${1:ComponentName}Props> = ({",
      "  ${3:destructuredProps}",
      "}) => {",
      "  const [${4:state}, set${4/(.*)/${1:/capitalize}/}] = useState<${5:StateType}>(${6:initialValue});",
      "  const [isLoading, setIsLoading] = useState(false);",
      "  const [error, setError] = useState<string | null>(null);",
      "",
      "  useEffect(() => {",
      "    const ${7:effectName} = async () => {",
      "      try {",
      "        setIsLoading(true);",
      "        setError(null);",
      "        ",
      "        // TODO: Implement effect logic",
      "        ",
      "      } catch (err) {",
      "        const errorMessage = err instanceof Error ? err.message : 'An error occurred';",
      "        setError(errorMessage);",
      "        logger.error('${1:ComponentName} effect failed', { error: errorMessage });",
      "      } finally {",
      "        setIsLoading(false);",
      "      }",
      "    };",
      "",
      "    ${7:effectName}();",
      "  }, [${8:dependencies}]);",
      "",
      "  if (error) {",
      "    return <div className=\"error\">Error: {error}</div>;",
      "  }",
      "",
      "  return (",
      "    <div className=\"${9:component-class}\">",
      "      {isLoading ? (",
      "        <div>Loading...</div>",
      "      ) : (",
      "        ${10:component-content}",
      "      )}",
      "    </div>",
      "  );",
      "};"
    ],
    "description": "Create a React component with proper error handling and loading states"
  },
  "FastAPI Endpoint": {
    "prefix": "fastapi-endpoint",
    "body": [
      "from fastapi import APIRouter, Depends, HTTPException",
      "from pydantic import BaseModel",
      "import logging",
      "",
      "logger = logging.getLogger(__name__)",
      "",
      "router = APIRouter(prefix=\"/${1:endpoint}\", tags=[\"${2:tag}\"])",
      "",
      "class ${3:RequestModel}(BaseModel):",
      "    ${4:fields}",
      "",
      "class ${5:ResponseModel}(BaseModel):",
      "    ${6:response_fields}",
      "",
      "@router.${7:method}(\"/${8:path}\", response_model=${5:ResponseModel})",
      "async def ${9:function_name}(",
      "    ${10:params},",
      "    current_user: User = Depends(get_current_user)",
      ") -> ${5:ResponseModel}:",
      "    try:",
      "        logger.info(\"${9:function_name} called\", {",
      "            \"user_id\": current_user.id,",
      "            \"${11:log_params}\"",
      "        })",
      "",
      "        # TODO: Implement endpoint logic",
      "        ",
      "        result = ${12:result}",
      "        ",
      "        logger.info(\"${9:function_name} completed\", {",
      "            \"user_id\": current_user.id,",
      "            \"result_id\": result.id if hasattr(result, 'id') else None",
      "        })",
      "",
      "        return result",
      "    except ValidationError as e:",
      "        logger.error(\"Validation error in ${9:function_name}\", {\"error\": str(e)})",
      "        raise HTTPException(status_code=400, detail=str(e))",
      "    except Exception as e:",
      "        logger.error(\"${9:function_name} failed\", {\"error\": str(e)})",
      "        raise HTTPException(status_code=500, detail=\"Internal server error\")"
    ],
    "description": "Create a FastAPI endpoint with proper error handling and logging"
  }
}
