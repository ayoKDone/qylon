version: '3.8'

services:
  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=development
      - PORT=3000
      - CORS_ORIGIN=http://localhost:3000
      - JWT_SECRET=your-jwt-secret-key
      - REDIS_URL=redis://redis:6379
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
    depends_on:
      - redis
    volumes:
      - ./services/api-gateway:/app
      - /app/node_modules
    networks:
      - qylon-network

  # User Management Service
  user-management:
    build:
      context: ./services/user-management
      dockerfile: Dockerfile
    ports:
      - '3001:3001'
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-jwt-secret-key
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./services/user-management:/app
      - /app/node_modules
    networks:
      - qylon-network

  # Client Management Service
  client-management:
    build:
      context: ./services/client-management
      dockerfile: Dockerfile
    ports:
      - '3002:3002'
    environment:
      - NODE_ENV=development
      - PORT=3002
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./services/client-management:/app
      - /app/node_modules
    networks:
      - qylon-network

  # Meeting Intelligence Service
  meeting-intelligence:
    build:
      context: ./services/meeting-intelligence
      dockerfile: Dockerfile
    ports:
      - '3003:3003'
    environment:
      - NODE_ENV=development
      - PORT=3003
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - RECALL_AI_API_KEY=${RECALL_AI_API_KEY}
      - RECALL_AI_BASE_URL=${RECALL_AI_BASE_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./services/meeting-intelligence:/app
      - /app/node_modules
    networks:
      - qylon-network

  # Content Creation Service
  content-creation:
    build:
      context: ./services/content-creation
      dockerfile: Dockerfile
    ports:
      - '3004:3004'
    environment:
      - NODE_ENV=development
      - PORT=3004
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./services/content-creation:/app
    networks:
      - qylon-network

  # Workflow Automation Service
  workflow-automation:
    build:
      context: ./services/workflow-automation
      dockerfile: Dockerfile
    ports:
      - '3005:3005'
    environment:
      - NODE_ENV=development
      - PORT=3005
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./services/workflow-automation:/app
      - /app/node_modules
    networks:
      - qylon-network

  # Integration Management Service
  integration-management:
    build:
      context: ./services/integration-management
      dockerfile: Dockerfile
    ports:
      - '3006:3006'
    environment:
      - NODE_ENV=development
      - PORT=3006
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./services/integration-management:/app
      - /app/node_modules
    networks:
      - qylon-network

  # Notification Service
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    ports:
      - '3007:3007'
    environment:
      - NODE_ENV=development
      - PORT=3007
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./services/notification-service:/app
      - /app/node_modules
    networks:
      - qylon-network

  # Analytics & Reporting Service
  analytics-reporting:
    build:
      context: ./services/analytics-reporting
      dockerfile: Dockerfile
    ports:
      - '3008:3008'
    environment:
      - NODE_ENV=development
      - PORT=3008
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./services/analytics-reporting:/app
    networks:
      - qylon-network

  # Security Service
  security:
    build:
      context: ./services/security
      dockerfile: Dockerfile
    ports:
      - '3001:3001'
    environment:
      - NODE_ENV=development
      - PORT=3001
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - postgres
    volumes:
      - ./services/security:/app
      - /app/node_modules
    networks:
      - qylon-network

  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_DB=qylon_dev
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    networks:
      - qylon-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - qylon-network

  # MongoDB (for analytics and unstructured data)
  mongodb:
    image: mongo:7
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=qylon_analytics
    ports:
      - '27017:27017'
    volumes:
      - mongodb_data:/data/db
    networks:
      - qylon-network

volumes:
  postgres_data:
  redis_data:
  mongodb_data:

networks:
  qylon-network:
    driver: bridge
